<?php

    namespace AppBundle\Repository;

    use Doctrine\ORM\EntityRepository;

    /**
     * UserInfoRepository
     *
     * This class was generated by the Doctrine ORM. Add your own custom
     * repository methods below.
     */
    class UserInfoRepository extends EntityRepository
    {
        /**
         * @param $keys
         * @param $sort
         * @param $page
         * @param $item_no
         * @return mixed
         */
        public function searchUserInfo($keys, $sort, $page, $item_no)
        {
            if ($keys) {
                $keys = preg_replace("/(\s+)|(ã€€+)+/", " ", $keys);
                $keys = preg_replace("/(^\s*)|(\s*$)/ ", "", $keys);
                $keys = preg_replace("/(\s+)/", " ", $keys);
                $keys = explode(" ", $keys);
            } else {
                $keys = array();
            }

            $user_infos = $this->createQueryBuilder('p');
            //add weight
            if (count($keys) > 0) {
                $weight = array();
                foreach ($keys as $key) {
                    array_push($weight, 'SIGN(LOCATE(\'' . $key . '\', p.full_name))');
                }
                $weight = implode(' + ', $weight);
                $user_infos->select($weight . ' as weight');
                $user_infos->addOrderBy('weight', 'DESC');
            }
            //add left columns
            $user_infos->addSelect('
                        p.id AS id,
                        p.full_name AS full_name,
                        p.exp AS exp,
                        p.contactNo AS contact_no,
                        p.qqNo AS qq_no,
                        p.country AS country,
                        p.region AS region,
                        p.city AS city,
                        p.points AS points,
                        p.birthday AS birthday,
                        p.wechatNo AS wechat_no');
            $user_infos_no = $this->createQueryBuilder('p');
            $user_infos_no->select('COUNT(p.id) AS total_no');
            foreach ($keys as $i => $key) {
                $user_infos->orWhere('LOCATE(:key' . $i . ', p.full_name) > 0')->setParameter('key' . $i, $key);
                $user_infos_no->orWhere('LOCATE(:key' . $i . ', p.full_name) > 0')->setParameter('key' . $i, $key);
            }
            switch ($sort) {
                case '2':
                    $user_infos->orderBy('p.full_name', 'ASC');
                    break;
                case '3':
                    $user_infos->orderBy('p.full_name', 'DESC');
                    break;
                case '6':
                    $user_infos->orderBy('p.country', 'ASC');
                    break;
                case '7':
                    $user_infos->orderBy('p.country', 'DESC');
                    break;
                case '8':
                    $user_infos->orderBy('p.region', 'ASC');
                    break;
                case '9':
                    $user_infos->orderBy('p.region', 'DESC');
                    break;
                case '10':
                    $user_infos->orderBy('p.city', 'DESC');
                    break;
                case '11':
                    $user_infos->orderBy('p.city', 'ASC');
                    break;
                case '12':
                    $user_infos->orderBy('p.id', 'ASC');
                    break;
                case '13':
                    $user_infos->orderBy('p.id', 'DESC');
                    break;
            }
            if (! (is_numeric($page) && $page > 1)) {
                $page = 1;
            }
            if (! (is_numeric($item_no) && $item_no > 1)) {
                $item_no = 18;
            }
            //$item_no = $item_no <= 18 ? 18 : ($item_no <= 24 ? 24 : 36);
            $user_infos->setFirstResult(($page - 1) * $item_no)->setMaxResults($item_no);
            $data['user_infos'] = $user_infos->getQuery()->getResult();
            $total_no = $user_infos_no->getQuery()->getSingleScalarResult();
            $data['total_page'] = ceil($total_no / $item_no);
            $data['total_no'] = $total_no;
            $data['row_no'] = ceil(count($data['user_infos']) / 3);
            return $data;
        }


        public function getUserInfo($id)
        {
            $query = $this->getEntityManager()->createQuery(
                'SELECT p FROM AppBundle:UserInfo p WHERE p.id = :id'
            );
            $query->setParameter('id', $id);
            $user_info = $query->getResult();

            $data = array();
            $data['user_info'] = $user_info[0];
            $data['user_infos'] = $user_info[0]->getUserInfos();
            $data['category'] = $user_info[0]->getCategory();

            return $data;
        }
    }
