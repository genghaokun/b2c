<?php

    namespace AppBundle\Repository;


    use Doctrine\ORM\EntityRepository;

    /**
     * UserOrderRepository
     *
     * This class was generated by the Doctrine ORM. Add your own custom
     * repository methods below.
     */
    class UserOrderRepository extends EntityRepository
    {
        public function findByType($id, $type)
        {
            $query = $this->getEntityManager()->createQuery('SELECT O FROM AppBundle:UserOrder O WHERE O.user = :id AND O.status = :type
                ORDER BY O.createAt DESC');
            $query->setParameter('id', $id);
            $query->setParameter('type', $type);
            return $query->getResult();
        }

        public function deleteorder($id)
        {
            $query = $this->getEntityManager()->createQuery('update AppBundle:UserOrder O set O.status=4 WHERE O.id = :id');
            $query->setParameter('id', $id);
            return $query->execute();
        }

        public function realdeleteorder($id)
        {
            $query = $this->getEntityManager()->createQuery('delete from AppBundle:UserOrder O WHERE O.id = :id');
            $query->setParameter('id', $id);
            return $query->execute();
        }

        public function searchUserOrder($user_id, $keys, $status, $sort, $page, $item_no)
        {
            if ($keys) {
                $keys = preg_replace("/(\s+)|(ã€€+)+/", " ", $keys);
                $keys = preg_replace("/(^\s*)|(\s*$)/ ", "", $keys);
                $keys = preg_replace("/(\s+)/", " ", $keys);
                $keys = explode(" ", $keys);
            } else {
                $keys = array();
            }

            $orders = $this->createQueryBuilder('p');

            //add left columns
            $orders->addSelect('
                        p.id AS id,
                        p.orderId AS order_id,
                        p.status AS status,
                        p.totalPrice AS total_price,
                        p.createAt AS create_at,
                        p.paidAt AS paid_at,
                        p.postFee AS post_fee');
            $orders_no = $this->createQueryBuilder('p');
            $orders_no->select('COUNT(p.id) AS total_no');
            foreach ($keys as $i => $key) {
                $orders->orWhere('LOCATE(:key' . $i . ', p.orderId) > 0')->setParameter('key' . $i, $key);
                $orders_no->orWhere('LOCATE(:key' . $i . ', p.orderId) > 0')->setParameter('key' . $i, $key);
            }
            if (is_numeric($status)) {
                $orders->andWhere('p.status = '. $status);
            }
            if (is_numeric($user_id)) {
                $orders->andWhere('p.user = '. $user_id);
            }
            switch ($sort) {
                case '2':
                    $orders->orderBy('p.orderId', 'ASC');
                    break;
                case '3':
                    $orders->orderBy('p.orderId', 'DESC');
                    break;
                case '4':
                    $orders->orderBy('p.status', 'ASC');
                    break;
                case '5':
                    $orders->orderBy('p.status', 'DESC');
                    break;
                case '7':
                    $orders->orderBy('p.totalPrice', 'ASC');
                    break;
                case '8':
                    $orders->orderBy('p.totalPrice', 'DESC');
                    break;
                case '9':
                    $orders->orderBy('p.id', 'ASC');
                    break;
                case '10':
                    $orders->orderBy('p.id', 'DESC');
                    break;
                case '11':
                    $orders->orderBy('p.createAt', 'ASC');
                    break;
                case '12':
                    $orders->orderBy('p.createAt', 'DESC');
                    break;
            }
            if (! (is_numeric($page) && $page > 1)) {
                $page = 1;
            }
            if (! (is_numeric($item_no) && $item_no > 1)) {
                $item_no = 18;
            }
            //$item_no = $item_no <= 18 ? 18 : ($item_no <= 24 ? 24 : 36);
            $orders->setFirstResult(($page - 1) * $item_no)->setMaxResults($item_no);
            $data['orders'] = $orders->getQuery()->getResult();
            $total_no = $orders_no->getQuery()->getSingleScalarResult();
            $data['total_page'] = ceil($total_no / $item_no);
            $data['total_no'] = $total_no;
            $data['row_no'] = ceil(count($data['orders']) / 3);
            return $data;
        }
    }
